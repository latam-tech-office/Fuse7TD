{
    "kind": "Template",
    "apiVersion": "v1",
    "metadata": {
        "name": "db-template",
        "creationTimestamp": null
    },
    "parameters": [
        {
            "displayName": "Application Name",
            "description": "The name for the application.",
            "name": "APPLICATION_NAME",
            "value": "ignite-td-db",
            "required": true
        },
        {
            "description": "DB Service Name",
            "name": "DATABASE_SERVICE_NAME",
            "value": "ignite-td-db",
            "required": true
        },
	{
	"name": "DB_ROUTE",
	"required": true,
	"value": "db.ignite1.rhtechofficelatam.com"
	}

    ],
    "objects": [
        {
  "apiVersion": "v1",
  "kind": "ConfigMap",
  "metadata": {
    "name": "create-db"
  },
"data": {
    "create_db.sql": "CREATE TABLE accounts (\n    accountid integer NOT NULL,\n    customerid integer,\n    accountbalance double precision,\n    accounttype integer\n);\nCREATE TABLE customers (\n    customerid integer NOT NULL,\n    customername text,\n    customerlastname text,\n    customerlevel integer\n);\nCREATE TABLE transactions (\n    transactionid integer NOT NULL,\n    clientid integer,\n    amount double precision,\n    accountid integer\n);\nINSERT INTO accounts (accountid, customerid, accountbalance, accounttype) VALUES (111, 1, 200, 1);\nINSERT INTO accounts (accountid, customerid, accountbalance, accounttype) VALUES (112, 1, -20, 1);\nINSERT INTO accounts (accountid, customerid, accountbalance, accounttype) VALUES (211, 2, 430, 2);\nINSERT INTO customers (customerid, customername, customerlastname, customerlevel) VALUES (1, 'Pablo', 'Szuster', 1);\nINSERT INTO customers (customerid, customername, customerlastname, customerlevel) VALUES (2, 'Juan', 'Perez', 2);\nINSERT INTO customers (customerid, customername, customerlastname, customerlevel) VALUES (3, 'Alfredo', 'Ramirez', 3);\nINSERT INTO transactions (transactionid, clientid, amount, accountid) VALUES (111, 1, 200, 112);\nINSERT INTO transactions (transactionid, clientid, amount, accountid) VALUES (222, 2, -200, 113);\nINSERT INTO transactions (transactionid, clientid, amount, accountid) VALUES (333, 3, 50, 211);\nALTER TABLE ONLY accounts   ADD CONSTRAINT \"accountID\" PRIMARY KEY (accountid);\nALTER TABLE ONLY customers  ADD CONSTRAINT \"customerID\" PRIMARY KEY (customerid);\nALTER TABLE ONLY transactions  ADD CONSTRAINT transactionid PRIMARY KEY (transactionid);\nCREATE INDEX \"fki_customerID\" ON accounts USING btree (customerid);\nALTER TABLE ONLY accounts  ADD CONSTRAINT \"customerIDFK\" FOREIGN KEY (customerid) REFERENCES customers (customerid);"
  }
},
{
      "kind": "Secret",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}"
      },
      "stringData" : {
        "database-user" : "admin",
        "database-password" : "password"
      }
    },
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "creationTimestamp": null
      },
      "spec": {
        "ports": [
          {
            "name": "postgresql",
            "protocol": "TCP",
            "port": 5432,
            "targetPort": 5432
          }
        ],
        "selector": {
          "name": "${DATABASE_SERVICE_NAME}"
        },
        "type": "ClusterIP",
        "sessionAffinity": "None"
      },
      "status": {
        "loadBalancer": {}
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "creationTimestamp": null
      },
      "spec": {
        "strategy": {
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "name": "${DATABASE_SERVICE_NAME}"
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "name": "${DATABASE_SERVICE_NAME}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "postgresql",
                "image": "postgres:9.5",
                "ports": [
                  {
                    "containerPort": 5432,
                    "protocol": "TCP"
                  }
                ],
                "readinessProbe": {
                  "timeoutSeconds": 1,
                  "initialDelaySeconds": 5,
                  "exec": {
                    "command": [ "/bin/sh", "-i", "-c", "psql -h 127.0.0.1 -U $POSTGRES_USER -q -d $POSTGRES_DB -c 'SELECT 1'"]
                  }
                },
                "livenessProbe": {
                  "timeoutSeconds": 1,
                  "initialDelaySeconds": 30,
                  "tcpSocket": {
                    "port": 5432
                  }
                },
                "env": [
                  {
                    "name": "POSTGRES_USER",
                    "valueFrom": {
                      "secretKeyRef" : {
                        "name" : "${DATABASE_SERVICE_NAME}",
                        "key" : "database-user"
                      }
                    }
                  },
                  {
                    "name": "POSTGRES_PASSWORD",
                    "valueFrom": {
                      "secretKeyRef" : {
                        "name" : "${DATABASE_SERVICE_NAME}",
                        "key" : "database-password"
                      }
                    }
                  },
                  {
                    "name": "POSTGRES_DB",
                    "value": "JBossBank"
                  }
                ],
                "volumeMounts": [
                  {
                    "name": "${DATABASE_SERVICE_NAME}-data",
                    "mountPath": "/var/lib/pgsql/data"
                  },
		  {
                    "name": "create-db-vol",
                    "mountPath": "/docker-entrypoint-initdb.d"
                  }
                ],
                "terminationMessagePath": "/dev/termination-log",
                "imagePullPolicy": "IfNotPresent",
                "capabilities": {},
                "securityContext": {
                  "capabilities": {},
                  "privileged": false
                }
              }
            ],
            "volumes": [
              {
                "name": "${DATABASE_SERVICE_NAME}-data",
                "emptyDir": {
                  "medium": ""
                }
              },
		{
                "name": "create-db-vol",
		"configMap":{
			"name":"create-db",
			"items":[{
			"key": "create_db.sql",
			"path": "create_db.sql"}]
		}
                }
            ],
            "restartPolicy": "Always",
            "dnsPolicy": "ClusterFirst"
          }
        }
      },
      "status": {}
        }
,
	    {
            "kind": "Service",
            "apiVersion": "v1",
            "metadata": {
                "name": "pgadmin4",
                "creationTimestamp": null,
                "labels": {
                    "app": "pgadmin4"
                },
                "annotations": {
                    "openshift.io/generated-by": "OpenShiftWebConsole"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "80-tcp",
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": 80
                    },
                    {
                        "name": "443-tcp",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 443
                    }
                ],
                "selector": {
                    "deploymentconfig": "pgadmin4"
                },
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "kind": "Route",
            "apiVersion": "v1",
            "metadata": {
                "name": "pgadmin4",
                "creationTimestamp": null,
                "labels": {
                    "app": "pgadmin4"
                },
                "annotations": {
                    "openshift.io/host.generated": "true"
                }
            },
            "spec": {
                "host": "${DB_ROUTE}",
                "to": {
                    "kind": "Service",
                    "name": "pgadmin4",
                    "weight": 100
                },
                "port": {
                    "targetPort": "80-tcp"
                },
                "wildcardPolicy": "None"
            }
        },
	{
            "kind": "DeploymentConfig",
            "apiVersion": "v1",
            "metadata": {
                "name": "pgadmin4",
                "generation": 1,
                "creationTimestamp": null,
                "labels": {
                    "app": "pgadmin4"
                },
                "annotations": {
                    "openshift.io/generated-by": "OpenShiftWebConsole"
                }
            },
            "spec": {
                "strategy": {
                    "type": "Rolling",
                    "rollingParams": {
                        "updatePeriodSeconds": 1,
                        "intervalSeconds": 1,
                        "timeoutSeconds": 600,
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    },
                    "resources": {},
                    "activeDeadlineSeconds": 21600
                },
                "replicas": 1,
                "test": false,
                "selector": {
                    "app": "pgadmin4",
                    "deploymentconfig": "pgadmin4"
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "pgadmin4",
                            "deploymentconfig": "pgadmin4"
                        },
                        "annotations": {
                            "openshift.io/generated-by": "OpenShiftWebConsole"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "pgadmin4-1",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "pgadmin4",
                                "image": "quay.io/pszuster/pgadmin4",
                                "ports": [
                                    {
                                        "containerPort": 80,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "PGADMIN_DEFAULT_EMAIL",
                                        "value": "ignite@redhat.com"
                                    },
                                    {
                                        "name": "PGADMIN_DEFAULT_PASSWORD",
                                        "value": "password"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "pgadmin4-1",
                                        "mountPath": "/var/lib/pgadmin"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "Always"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            }
        }
    ]
}
